{# =======================================================
   SESSION TEMPLATE
   Purpose:
     This template creates a comprehensive session document
     for the Agent Sessions Protocol with all required sections
     and detailed guidance for multi-agent collaboration.

   For the model:
     - This template is a **spec**, not a literal prompt.
     - You must read and follow its structure and tone
       when generating new sessions based on context.
     - Final output must be clean Markdown (no braces, comments, or code).
     - Write clearly, concisely, and persuasively for agents.
     - Retain all section headings, even if a section is "Not applicable".

   Style guidance:
     - Write in a professional but approachable tone.
     - Each section should provide actionable guidance.
     - Use specific examples where helpful.
     - Focus on what needs to be done, not rigid timelines.
   ======================================================= #}

# Session: {{ SESSION_SLUG }}

## Context
{{ CONTEXT }}
{# Example: The claim-session and complete-session scripts need to be improved to handle edge cases and ensure consistency. This session will address the identified issues in both scripts. #}

## Problem Statement
{{ PROBLEM_STATEMENT }}
{# Example: The current implementation of the session management scripts has several reliability and consistency issues that need to be addressed. These scripts handle the atomic claiming and completion of sessions, which are fundamental operations for multi-agent coordination. However, they lack proper error handling, validation, and consistency in their approach to file operations and git commands. #}

## Acceptance Criteria
{% for criterion in ACCEPTANCE_CRITERIA %}
- [ ] {{ criterion }}
{% endfor %}
{# Example - Combine what must be done with how we measure success.
   Make criteria specific, measurable, testable, and outcome-focused:

**Functional Requirements:**
- [ ] Script handles missing .agents/sessions.lock file with clear error message and recovery instructions
- [ ] Script validates SESSION.md exists before proceeding, exits gracefully with helpful message if not found
- [ ] Script checks if session branch already exists and prevents duplicate creation
- [ ] Script verifies worktree directory doesn't exist before creation, cleans up on failure
- [ ] Both scripts use consistent error message format: "[ERROR] <context>: <problem>. Try: <suggestion>"
- [ ] Both scripts provide consistent success output showing next steps for the user

**Quality Metrics:**
- [ ] Zero unhandled errors in both scripts (all error paths have explicit handling)
- [ ] Test suite validates behavior for at least 5 identified edge cases (missing files, permissions, conflicts, network, disk space)
- [ ] Test coverage >90% of code paths including error scenarios
- [ ] Scripts complete successfully in clean repository state without any manual intervention

**Documentation:**
- [ ] Documentation includes at least 3 common error scenarios with troubleshooting steps
- [ ] All error messages reference specific documentation sections for recovery

**Robustness:**
- [ ] Scripts handle git operation failures (network issues, permissions) with clear error messages and no corrupt state
- [ ] Scripts clean up partial state on failure (no orphaned worktrees, branches, or lock entries)

Note: Group related criteria and focus on observable outcomes rather than activities like "add error handling"
#}

## Implementation Plan
{{ IMPLEMENTATION_PLAN }}
{# Example:
1. Review both scripts to identify all potential edge cases
2. Add error handling for all file operations
3. Add validation for all git operations
4. Ensure consistency in error handling and user feedback
5. Add documentation for both scripts
6. Add tests for both scripts
7. Verify that both scripts work correctly in all edge cases
8. Create KB merge session if needed
#}

## Risks & Mitigations
{{ RISKS }}
{# Example:
- **Risk:** Changes might break existing session workflows
  **Mitigation:** Extensive testing with backup/rollback procedures
  **Impact:** Medium - could block agent work temporarily

- **Risk:** Error handling might make scripts slower
  **Mitigation:** Performance testing and optimization of critical paths
  **Impact:** Low - acceptable trade-off for reliability
#}

## Dependencies
{{ DEPENDENCIES }}
{# Example:
- Access to test repositories for validation
- Understanding of current session protocol requirements
- Knowledge of git worktree and branch management
- Familiarity with shell scripting best practices
#}

## Edge Cases to Consider
{{ EDGE_CASES }}
{# Example:
- Git repository not in clean state when claiming/completing sessions
- User doesn't have write permissions to required files/directories
- Git remote not accessible during operations
- Session directory structure is corrupted or incomplete
- Concurrent access to session files (race conditions)
- Disk space issues during worktree creation
- Network connectivity issues during git operations
#}

## Notes
{{ NOTES }}
{# Example:
- Keep solution simple and maintainable
- Prioritize reliability over performance for critical operations
- Document all changes thoroughly for future maintenance
- Test with actual session scenarios before finalizing
#}

---

**Note**: This session follows the Agent Sessions Protocol. SESSION.md becomes read-only when the session moves to active state. Use worklog.md for progress updates and active-plan.md for dynamic task management during active work.

{# =======================================================
CHECKLIST FOR LLM (not part of final session):
- [ ] All placeholders replaced with specific, contextual content
- [ ] Sections provide actionable guidance for agents
- [ ] Acceptance criteria are specific and measurable
- [ ] Implementation plan is clear and flexible
- [ ] Risks and mitigations are realistic and specific
- [ ] No template syntax or comments remain in final output
- [ ] Tone is professional and helpful for multi-agent collaboration
======================================================= #}