#!/bin/bash
# Session claim and activation script
# Usage: ./claim-session <session-slug>

set -e

SESSION_SLUG="${1:-}"
USER_NAME=$(git config user.name || echo "Unknown")
USER_EMAIL=$(git config user.email || echo "unknown@example.com")

# Validate arguments
if [ -z "$SESSION_SLUG" ]; then
  echo "Usage: $0 <session-slug>"
  echo "Example: $0 2025-10-14-auth-system"
  exit 1
fi

echo "🔍 Attempting to claim session: $SESSION_SLUG"

# Step 1: Pull latest state
echo "📥 Pulling latest state..."
git pull --rebase origin main

# Step 2: Check if session already claimed
if grep -q "$SESSION_SLUG" .agents/sessions.lock 2>/dev/null; then
  echo "❌ Session already claimed"
  echo ""
  echo "Available sessions:"
  ls -1 _AGENTS/sessions/planned/ 2>/dev/null || echo "  (none)"
  exit 1
fi

# Step 3: Check if session exists
if [ ! -d "_AGENTS/sessions/planned/$SESSION_SLUG" ]; then
  echo "❌ Session does not exist in planned/"
  echo ""
  echo "Available sessions:"
  ls -1 _AGENTS/sessions/planned/ 2>/dev/null || echo "  (none)"
  exit 1
fi

# Step 4: Claim session atomically
TIMESTAMP=$(date +%s)
mkdir -p .agents
echo "$SESSION_SLUG:$TIMESTAMP" >> .agents/sessions.lock
git add .agents/sessions.lock
git commit -m "[$SESSION_SLUG] Claim session"

# Step 5: Push (atomic operation)
if git push origin main; then
  echo "✅ Session claimed successfully"
  
  # Step 6: Move session to active and commit
  echo "📁 Moving session to active..."
  mv _AGENTS/sessions/planned/$SESSION_SLUG _AGENTS/sessions/active/
  git add _AGENTS/sessions/
  git commit -m "[$SESSION_SLUG] Move to active"

  # Step 6.5: Set SESSION.md to read-only
  echo "🔒 Setting SESSION.md to read-only..."
  if chmod 444 _AGENTS/sessions/active/$SESSION_SLUG/SESSION.md 2>/dev/null; then
    echo "📝 SESSION.md is now read-only to preserve original plan"
    echo "   Use worklog.md and active-plan.md for updates during session"
    git add _AGENTS/sessions/active/$SESSION_SLUG/SESSION.md
    git commit -m "[$SESSION_SLUG] Set SESSION.md read-only"
  else
    echo "⚠️  Warning: Could not set SESSION.md to read-only (continuing anyway)"
  fi
  
  # Step 7: Create session activation file and commit
  echo "🔑 Creating session environment..."
  cat > _AGENTS/sessions/active/$SESSION_SLUG/.session-env << EOF
export GIT_AUTHOR_NAME="Cursor-Local-1 (via $USER_NAME)"
export GIT_AUTHOR_EMAIL="$USER_EMAIL+$SESSION_SLUG@agents.local"
export GIT_COMMITTER_NAME="Session-$SESSION_SLUG (via $USER_NAME)"
export GIT_COMMITTER_EMAIL="$USER_EMAIL+$SESSION_SLUG@agents.local"
export SESSION_ID="$SESSION_SLUG"
export SESSION_SLUG="$SESSION_SLUG"
export PS1="($SESSION_SLUG) \w $ "
echo "✅ Session active: \$SESSION_SLUG"
EOF
  
  git add _AGENTS/sessions/active/$SESSION_SLUG/.session-env
  git commit -m "[$SESSION_SLUG] Add session environment"
  
  # Step 8: Create worktree with session branch
  echo "🌳 Creating worktree..."
  git worktree add -b session/$SESSION_SLUG .worktrees/$SESSION_SLUG HEAD
  
  echo ""
  echo "✅ Session ready: $SESSION_SLUG"
  echo ""
  echo "📂 Worktree location: .worktrees/$SESSION_SLUG"
  echo "📄 Session metadata: _AGENTS/sessions/active/$SESSION_SLUG"
  echo ""
  echo "To activate session environment:"
  echo "  cd .worktrees/$SESSION_SLUG"
  echo "  source ../../_AGENTS/sessions/active/$SESSION_SLUG/.session-env"
  echo ""
  echo "Session branch: session/$SESSION_SLUG"
  
else
  echo "❌ Push failed - session already claimed"
  echo "Rolling back..."
  git reset --hard HEAD~1
  echo ""
  echo "Try claiming a different session"
  exit 1
fi
