#!/bin/bash
# Session completion script
# Usage: ./complete-session <session-slug>

set -e

SESSION_SLUG="${1:-}"

# Validate arguments
if [ -z "$SESSION_SLUG" ]; then
  echo "Usage: $0 <session-slug>"
  echo "Example: $0 2025-10-14-auth-system"
  exit 1
fi

SESSION_PATH="_AGENTS/sessions/active/$SESSION_SLUG"
WORKTREE_PATH=".worktrees/$SESSION_SLUG"

# Verify session exists
if [ ! -d "$SESSION_PATH" ]; then
  echo "‚ùå Session not found: $SESSION_PATH"
  exit 1
fi

echo "üèÅ Completing session: $SESSION_SLUG"

# 1. Generate patch (from worktree if it exists)
echo "üì¶ Generating patch file..."
if [ -d "$WORKTREE_PATH" ]; then
  cd "$WORKTREE_PATH"
  git format-patch main --stdout > "../../$SESSION_PATH/$SESSION_SLUG.patch"
  cd ../..
else
  echo "‚ö†Ô∏è  Worktree not found, attempting from current location..."
  git format-patch main --stdout > "$SESSION_PATH/$SESSION_SLUG.patch"
fi
echo "‚úÖ Patch created: $SESSION_PATH/$SESSION_SLUG.patch"

# 2. Check for KB learnings and create KB merge session if exists
if [ -f "_AGENTS/knowledge/sessions/$SESSION_SLUG/learnings.md" ]; then
  echo "üìö KB learnings found, creating KB merge session..."
  
  # Extract topic from learnings (first heading)
  TOPIC=$(head -1 "_AGENTS/knowledge/sessions/$SESSION_SLUG/learnings.md" | sed 's/^# //' | tr ' ' '-' | tr '[:upper:]' '[:lower:]')
  KB_SESSION="kb-$(date +%Y-%m-%d)-merge-$TOPIC"
  
  # Create KB merge session in drafting first
  mkdir -p "_AGENTS/sessions/drafting/$KB_SESSION"
  
  # Use template if available, otherwise inline
  if [ -f "_AGENTS/sessions/_templates/kb-merge-SESSION.md" ]; then
    sed -e "s/{{SOURCE_SESSION}}/$SESSION_SLUG/g" \
        -e "s/{{TOPIC}}/$TOPIC/g" \
        "_AGENTS/sessions/_templates/kb-merge-SESSION.md" > "_AGENTS/sessions/drafting/$KB_SESSION/SESSION.md"
  else
    cat > "_AGENTS/sessions/drafting/$KB_SESSION/SESSION.md" << EOF
# KB Merge Session: $TOPIC

## Context
- **Source Session**: $SESSION_SLUG
- **Learnings Path**: _AGENTS/knowledge/sessions/$SESSION_SLUG/learnings.md

## Acceptance Criteria
- [ ] Review learnings for quality and accuracy
- [ ] Identify target location in knowledge/shared/
- [ ] Merge without duplicating existing content
- [ ] Resolve conflicts with existing KB entries
- [ ] Update KB structure if needed
- [ ] Preserve source learnings for reference
- [ ] Document merge decisions in worklog

## Original Implementation Plan
1. Review source learnings and existing KB
2. Identify conflicts, duplications, gaps
3. Determine merge strategy (augment/create/restructure)
4. Apply changes to knowledge/shared/
5. Commit and merge to main
EOF
  fi
  
  git add "_AGENTS/sessions/drafting/$KB_SESSION/"
  git commit -m "[$SESSION_SLUG] Create KB merge session in drafting: $KB_SESSION"
  echo "‚úÖ KB merge session created in drafting: $KB_SESSION"
  echo "üìù Review and move to planned/ when ready for agents to claim"
fi

# 3. Remove worktree if it exists
if [ -d "$WORKTREE_PATH" ]; then
  echo "üå≥ Removing worktree..."
  git worktree remove "$WORKTREE_PATH" 2>/dev/null || git worktree remove --force "$WORKTREE_PATH"
  echo "‚úÖ Worktree removed"
else
  echo "‚ö†Ô∏è  No worktree found at $WORKTREE_PATH"
fi

# 4. Merge to main
echo "üîÄ Merging to main..."
git pull origin main
git merge --squash "session/$SESSION_SLUG"
git commit -m "[$SESSION_SLUG] Session complete: $SESSION_SLUG"
git push origin main

# 5. Remove session from lock file
echo "üîì Releasing session lock..."
sed -i "/^$SESSION_SLUG:/d" .agents/sessions.lock
git add .agents/sessions.lock

# 6. Move to completed
echo "üìÅ Moving session to completed/..."
mv "$SESSION_PATH" _AGENTS/sessions/completed/
git add _AGENTS/sessions/
git commit -m "[$SESSION_SLUG] Archive session"
git push origin main

# 7. Cleanup branch
echo "üßπ Cleaning up branch..."
git branch -d "session/$SESSION_SLUG"

echo ""
echo "‚úÖ Session complete: $SESSION_SLUG"
echo ""
echo "üì¶ Artifacts:"
echo "  - Patch: _AGENTS/sessions/completed/$SESSION_SLUG/$SESSION_SLUG.patch"
echo "  - Worklog: _AGENTS/sessions/completed/$SESSION_SLUG/worklog.md"
if [ -f "_AGENTS/knowledge/sessions/$SESSION_SLUG/learnings.md" ]; then
  echo "  - Learnings: _AGENTS/knowledge/sessions/$SESSION_SLUG/learnings.md"
fi
echo ""
echo "‚ö†Ô∏è  Remember to deactivate session environment:"
echo "  unset GIT_AUTHOR_NAME GIT_AUTHOR_EMAIL GIT_COMMITTER_NAME GIT_COMMITTER_EMAIL"
echo "  unset SESSION_SLUG SESSION_ID PS1"
echo ""
