#!/bin/bash
# Session completion script
# Usage: ./complete-session <agent-id> <session-slug>

set -e

AGENT_ID="${1:-}"
SESSION_SLUG="${2:-}"

# Validate arguments
if [ -z "$AGENT_ID" ] || [ -z "$SESSION_SLUG" ]; then
  echo "Usage: $0 <agent-id> <session-slug>"
  echo "Example: $0 cursor-1 2025-10-14-auth-system"
  exit 1
fi

SESSION_PATH="sessions/active/$AGENT_ID/$SESSION_SLUG"

# Verify session exists
if [ ! -d "$SESSION_PATH" ]; then
  echo "❌ Session not found: $SESSION_PATH"
  exit 1
fi

echo "🏁 Completing session: $SESSION_SLUG"

# 1. Generate patch
echo "📦 Generating patch file..."
cd "$SESSION_PATH"
git format-patch main --stdout > "$SESSION_SLUG.patch"
cd ../../../..

# 2. Check for KB learnings and create KB merge session if exists
if [ -f "_AGENTS/knowledge/sessions/$SESSION_SLUG/learnings.md" ]; then
  echo "📚 KB learnings found, creating KB merge session..."
  
  # Extract topic from learnings (first heading)
  TOPIC=$(head -1 "_AGENTS/knowledge/sessions/$SESSION_SLUG/learnings.md" | sed 's/^# //' | tr ' ' '-' | tr '[:upper:]' '[:lower:]')
  KB_SESSION="kb-$(date +%Y-%m-%d)-merge-$TOPIC"
  
  # Create KB merge session
  mkdir -p "sessions/planned/$KB_SESSION"
  
  # Use template if available, otherwise inline
  if [ -f "_AGENTS/sessions/_templates/kb-merge-SESSION.md" ]; then
    sed -e "s/{{SOURCE_SESSION}}/$SESSION_SLUG/g" \
        -e "s/{{AGENT_ID}}/$AGENT_ID/g" \
        -e "s/{{TOPIC}}/$TOPIC/g" \
        "_AGENTS/sessions/_templates/kb-merge-SESSION.md" > "sessions/planned/$KB_SESSION/SESSION.md"
  else
    cat > "sessions/planned/$KB_SESSION/SESSION.md" << EOF
# KB Merge Session: $TOPIC

## Context
- **Source Session**: $SESSION_SLUG
- **Agent**: $AGENT_ID
- **Learnings Path**: _AGENTS/knowledge/sessions/$SESSION_SLUG/learnings.md

## Acceptance Criteria
- [ ] Review learnings for quality and accuracy
- [ ] Identify target location in knowledge/shared/
- [ ] Merge without duplicating existing content
- [ ] Resolve conflicts with existing KB entries
- [ ] Update KB structure if needed
- [ ] Preserve source learnings for reference
- [ ] Document merge decisions in worklog

## Original Implementation Plan
1. Review source learnings and existing KB
2. Identify conflicts, duplications, gaps
3. Determine merge strategy (augment/create/restructure)
4. Apply changes to knowledge/shared/
5. Commit and merge to main
EOF
  fi
  
  git add "sessions/planned/$KB_SESSION/"
  git commit -m "[$AGENT_ID] Create KB merge session: $KB_SESSION"
  echo "✅ KB merge session created: $KB_SESSION"
fi

# 3. Move to completed
echo "📁 Moving session to completed/..."
mv "$SESSION_PATH" sessions/completed/
git add sessions/
git commit -m "[$AGENT_ID] Complete session $SESSION_SLUG"

# 4. Merge to main
echo "🔀 Merging to main..."
git checkout main
git pull origin main
git merge --squash "session/$AGENT_ID/$SESSION_SLUG"
git commit -m "[$AGENT_ID] Session complete: $SESSION_SLUG"
git push origin main

# 5. Cleanup
echo "🧹 Cleaning up..."
git branch -d "session/$AGENT_ID/$SESSION_SLUG"

echo ""
echo "✅ Session complete: $SESSION_SLUG"
echo ""
echo "⚠️  Remember to deactivate session environment:"
echo "  unset GIT_AUTHOR_NAME GIT_AUTHOR_EMAIL GIT_COMMITTER_NAME GIT_COMMITTER_EMAIL"
echo "  unset SESSION_AGENT SESSION_SLUG SESSION_BRANCH PS1"

